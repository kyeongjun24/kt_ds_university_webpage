<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
      PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="mapper.member">
	<resultMap id="memResult" type="memberVO">
		<result property="id" column="mem_id" />
        <result property="pw" column="mem_pw" />
        <result property="name" column="mem_name" />
        <result property="phone" column="mem_phone" />
        <result property="email" column="mem_email" />
        <result property="subscription" column="mem_subscription" />
        <result property="companyName" column="mem_company_name" />
        <result property="delYN" column="mem_delYN" />
        <result property="joinDate" column="mem_join_date" />
        <result property="modDate" column="mem_mod_date" />
        <result property="tel" column="mem_tel" />
        <result property="loginFail" column="mem_login_fail" />
	</resultMap> 
   
   <!-- 검색과 기준에 의해 나눠지는 리스트 뽑기 select (팝업)  -->
	<select id="selectCriteriaBySearchMemberListPopup" resultMap="memResult">
		SELECT
			<include refid="member-columns"></include>
		FROM (
			SELECT ROW_NUMBER() OVER (ORDER BY mem_join_date) NUM, <include refid="member-columns"></include>
			from member
			<choose>
	         	<when test="searchType == 'name'">
	         		WHERE mem_name LIKE '%' || #{searchText} || '%'
	         	</when>
	         	<when test="searchType == 'id'">
	         		WHERE mem_id LIKE '%' || #{searchText} || '%'
	         	</when>
         	</choose>
		ORDER BY mem_join_date)
		WHERE NUM BETWEEN #{pageStart}
		<choose>
			<when test="#{perPageNum} == '10'">
				AND #{perPageNum}
			</when>
			<when test="#{perPageNum} != '10'">
				AND (#{perPageNum} + #{pageStart}) - 1
			</when>
		</choose>
		order by mem_join_date
	</select>
	
	<!-- 팝업 -->
	<select id="selectBySearchMemberListPopup" resultMap="memResult" parameterType="java.util.Map" >
         select * from member         
	     <choose>
         	<when test="searchType == 'name'">
         		WHERE mem_name LIKE '%' || #{searchText} || '%'
         	</when>
         	<when test="searchType == 'id'">
         		WHERE mem_id LIKE '%' || #{searchText} || '%'
         	</when>
         </choose>
	</select>
   
   
   <!-- VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV -->
   
   <sql id="member-columns">
   	<![CDATA[
   		mem_id, mem_pw, mem_name, mem_phone, mem_email, mem_subscription, mem_company_name, mem_tel,
         mem_delYN, mem_join_date, SUBSTR(mem_mod_date,0, 10) as mem_mod_date, mem_login_fail 
   	]]>
   </sql>
   
   <sql id="member-columns2">
   	<![CDATA[
   		mem_id, mem_pw, mem_name, mem_phone, mem_email, mem_subscription, mem_company_name, mem_tel,
         mem_delYN, mem_join_date, mem_mod_date, mem_login_fail
   	]]>
   </sql>
	
	<select id="selectAllMemberList" resultMap="memResult">
          select 
          	<include refid="member-columns"></include>	
          from member order by mem_join_date desc
	</select>
	
	<select id="selectBySearchMemberList" resultMap="memResult" parameterType="java.util.Map" >
         select * from member         
	     <choose>
         	<when test="searchType == 'name'">
         		WHERE mem_name LIKE '%' || #{searchText} || '%'
         	</when>
         	<when test="searchType == 'companyName'">
         		WHERE UPPER(mem_company_name) LIKE '%' || UPPER(#{searchText}) || '%'
         	</when>
         	<when test="searchType == 'id'">
         		WHERE UPPER(mem_id) LIKE '%' || UPPER(#{searchText}) || '%'
         	</when>
         </choose>
         order by mem_join_date desc
	</select>
	
	<!-- 페이지 전체 리시트 뽑아주는 select list_paging -->
	<select id="selectMemberListByPaging" resultMap="memResult">
		SELECT <include refid="member-columns"></include> FROM
				(select ROW_NUMBER() OVER (ORDER BY mem_join_date desc) NUM, <include refid="member-columns2"></include>
				from member 
				ORDER BY mem_join_date desc)
		WHERE NUM BETWEEN #{page} AND 10
		

	</select>
	
	<!-- 기준으로 페이지 리시트 나누는 select list.jsp -->
	<select id="listCriteria" resultMap="memResult">
		SELECT
			<include refid="member-columns"></include>
		FROM (select ROW_NUMBER() OVER (ORDER BY mem_join_date desc) NUM, <include refid="member-columns2"></include>
				from member 
				ORDER BY mem_join_date desc)
		WHERE NUM BETWEEN #{pageStart} 
		<choose>
			<when test="#{perPageNum} == '10'">
				AND #{perPageNum} - 1
			</when>
			<when test="#{perPageNum} != '10'">
				AND (#{perPageNum} + #{pageStart}) - 1
			</when>
		</choose> 
		order by mem_join_date desc
	</select>
	
	<!-- 검색과 기준에 의해 나눠지는 리스트 뽑기 select  -->
	<select id="selectCriteriaBySearchMemberList" resultMap="memResult">
		SELECT
			<include refid="member-columns"></include>
		FROM (
			SELECT ROW_NUMBER() OVER (ORDER BY mem_join_date desc) NUM, <include refid="member-columns2"></include>
			from member
			<choose>
	         	<when test="searchType == 'name'">
	         		WHERE mem_name LIKE '%' || #{searchText} || '%'
	         	</when>
	         	<when test="searchType == 'companyName'">
	         		WHERE UPPER(mem_company_name) LIKE '%' || UPPER(#{searchText}) || '%'
	         	</when>
	         	<when test="searchType == 'id'">
	         		WHERE UPPER(mem_id) LIKE '%' || UPPER(#{searchText}) || '%'
	         	</when>
         	</choose>
		ORDER BY mem_join_date desc)
		WHERE NUM BETWEEN #{pageStart}
		<choose>
			<when test="#{perPageNum} == '10'">
				AND #{perPageNum} - 1
			</when>
			<when test="#{perPageNum} != '10'">
				AND (#{perPageNum} + #{pageStart}) - 1
			</when>
		</choose>
		order by mem_join_date desc
	</select>
	
	
	<select id="selectCheckMember" resultType="int" parameterType="String" >
	 <![CDATA[
         select COUNT(*) from member
         where mem_id=#{id}	 	
      ]]>
	
	</select>
	
	<select id="selectMember"  resultMap="memResult"   parameterType="String" >
	<![CDATA[
		select * from member	
		where mem_id=#{id} 	
	]]>
	
  </select>
    
  <insert id="insertMember"  parameterType="memberVO">
		<![CDATA[
		 insert into member(mem_id, mem_pw, mem_name, mem_phone, mem_email, mem_subscription, mem_company_name, mem_tel)
		 values(#{id}, #{pw}, #{name}, #{phone}, #{email}, #{subscription}, #{companyName}, #{tel})
		]]>      
	</insert>
	
   
   <update id="updateMember"  parameterType="memberVO">
     <![CDATA[
	     update member
	     set mem_pw=#{pw}, mem_name=#{name}, mem_phone=#{phone}, mem_email=#{email}, mem_tel=#{tel},
	     mem_subscription=#{subscription}, mem_company_name=#{companyName}, mem_mod_date=TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MM:SS')
	     where 
	     mem_id=#{id}
      ]]>      
   </update> 
     
   <delete id="deleteMember"  parameterType="String">
	<![CDATA[
	   DELETE FROM 
	   	member
	   WHERE mem_id=#{id}
	]]>      
  </delete>
  
  <select id="loginById"  resultMap="memResult"   parameterType="memberVO" >
	<![CDATA[
		select * from member	
		where mem_id=#{id} and mem_pw=#{pw}		
	]]>
  </select>
  
  <insert id="insertMemberLog" parameterType="java.util.Map">
  	<![CDATA[
  		INSERT INTO event_security_log(esl_id, user_id, esl_type, esl_log_text) values(esl_seq.NEXTVAL, #{manager}, 'delete_member', #{manager}|| ' 께서 ' || #{id} || ' 를 탈퇴시켰습니다.')
  	]]>
  </insert>
  
  <insert id="updateMemberLog" parameterType="java.util.Map">
  	<![CDATA[
  		INSERT INTO event_security_log(esl_id, user_id, esl_type, esl_log_text) VALUES(esl_seq.NEXTVAL, #{manager}, 'update_member', #{manager} || ' 께서 ' || #{id} || ' 를 업데이트하였습니다.')
  	]]>
  </insert>
  
  <insert id="addMemberLog" parameterType="java.util.Map">
  	<![CDATA[
  		INSERT INTO event_security_log(esl_id, user_id, esl_type, esl_log_text) VALUES(esl_seq.NEXTVAL, #{manager}, 'insert_member', #{manager} || ' 께서 ' || #{id} || ' 를 등록하였습니다.')
  	]]>
  </insert>
  
  <insert id="insertLogByInformationInquiry" parameterType="java.util.Map">
  <![CDATA[
  	INSERT INTO event_security_log(esl_id, user_id, esl_type, esl_log_text) 
  	values(esl_seq.NEXTVAL, #{manager}, 'select_memberInfo', #{manager} || '께서 ' || #{id} ||'의 정보를 조회하였습니다. 사유 : ' || #{reason})
  ]]>
  </insert>  
  
</mapper>